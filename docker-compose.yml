version: '3.4'

services:
  reverse-proxy:
    image: traefik:v1.7.2
    command:
      --api
      --docker
      --docker.swarmmode
      --docker.domain=docker.localhost
      --metrics.prometheus=true
      --metrics.prometheus.buckets="0.01,0.05,0.1,0.2,0.5"
    ports:
      - "80:80"
      - "8080:8080"
    deploy:
      replicas: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    networks:
      - traefik_net

  model_a:
    image: model_a
    depends_on:
      - redis
    deploy:
      labels:
        - "traefik.backend=release_namer"
        - "traefik.backend.healthcheck.path=/healthcheck/"
        - "traefik.frontend.rule=PathPrefix:/"
        - "traefik.port=5000"
      replicas: 2
      update_config:
        parallelism: 1
        delay: 20s
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - traefik_net

  model_b:
    image: model_b
    depends_on:
      - redis
    deploy:
      labels:
        - "traefik.backend=release_namer"
        - "traefik.port=5000"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 20s
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - traefik_net

  bandits:
    image: bandits
    depends_on:
      - model_a
      - model_b
      - redis
    deploy:
      replicas: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik_net

  redis:
    image: redis:5.0-alpine
    ports:
      - "6379:6379"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 20s
        order: start-first
      restart_policy:
        condition: on-failure
    networks:
      - traefik_net

networks:
  traefik_net:
    driver: overlay
